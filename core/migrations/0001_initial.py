# Generated by Django 5.2.5 on 2025-08-23 08:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('user', 'User'), ('admin', 'Admin'), ('security_admin', 'Security Admin'), ('super_admin', 'Super Admin')], default='user', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=20, unique=True, verbose_name='Employee ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last Name')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, verbose_name='Gender')),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20, verbose_name='Marital Status')),
                ('nationality', models.CharField(max_length=100, verbose_name='Nationality')),
                ('religion', models.CharField(max_length=100, verbose_name='Religion')),
                ('blood_group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, verbose_name='Blood Group')),
                ('email', models.EmailField(max_length=254, verbose_name='Email Address')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone Number')),
                ('address', models.TextField(verbose_name='Current Address')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('state', models.CharField(max_length=100, verbose_name='State/Province')),
                ('postal_code', models.CharField(max_length=20, verbose_name='Postal Code')),
                ('country', models.CharField(max_length=100, verbose_name='Country')),
                ('department', models.CharField(max_length=100, verbose_name='Department')),
                ('position', models.CharField(max_length=100, verbose_name='Position/Job Title')),
                ('hire_date', models.DateField(verbose_name='Date of Hire')),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('temporary', 'Temporary')], max_length=20, verbose_name='Employment Type')),
                ('salary', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Basic Salary')),
                ('emergency_contact_name', models.CharField(max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', models.CharField(max_length=20, verbose_name='Emergency Contact Phone')),
                ('emergency_contact_relationship', models.CharField(max_length=50, verbose_name='Emergency Contact Relationship')),
                ('number_of_dependents', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)], verbose_name='Number of Dependents')),
                ('security_clearance_level', models.CharField(blank=True, choices=[('none', 'None'), ('basic', 'Basic'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('top_secret', 'Top Secret')], max_length=20, null=True, verbose_name='Security Clearance Level')),
                ('security_clearance_date', models.DateField(blank=True, null=True, verbose_name='Security Clearance Date')),
                ('security_clearance_expiry', models.DateField(blank=True, null=True, verbose_name='Security Clearance Expiry')),
                ('background_check_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=20, null=True, verbose_name='Background Check Status')),
                ('background_check_date', models.DateField(blank=True, null=True, verbose_name='Background Check Date')),
                ('drug_test_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=20, null=True, verbose_name='Drug Test Status')),
                ('drug_test_date', models.DateField(blank=True, null=True, verbose_name='Drug Test Date')),
                ('fingerprint_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], max_length=20, null=True, verbose_name='Fingerprint Status')),
                ('fingerprint_date', models.DateField(blank=True, null=True, verbose_name='Fingerprint Date')),
                ('access_card_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('issued', 'Issued'), ('revoked', 'Revoked')], max_length=20, null=True, verbose_name='Access Card Status')),
                ('access_card_issue_date', models.DateField(blank=True, null=True, verbose_name='Access Card Issue Date')),
                ('access_card_expiry', models.DateField(blank=True, null=True, verbose_name='Access Card Expiry')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employee Profile',
                'verbose_name_plural': 'Employee Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Dependent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Dependent Name')),
                ('relationship', models.CharField(choices=[('spouse', 'Spouse'), ('son', 'Son'), ('daughter', 'Daughter'), ('father', 'Father'), ('mother', 'Mother'), ('other', 'Other')], max_length=20, verbose_name='Relationship')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('employee_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependents', to='core.employeeprofile')),
            ],
            options={
                'verbose_name': 'Dependent',
                'verbose_name_plural': 'Dependents',
                'ordering': ['name'],
            },
        ),
    ]
